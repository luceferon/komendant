unit PereselenieU;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Data.DB, MemDS, DBAccess,
  Uni;

type
  TFMPereselenie = class(TForm)
    CBOtkuda: TComboBox;
    CBKogo: TComboBox;
    Label1: TLabel;
    Label2: TLabel;
    CBKuda1: TComboBox;
    CBKomnata: TComboBox;
    Label3: TLabel;
    Label4: TLabel;
    Button1: TButton;
    Button2: TButton;
    UniConnection1: TUniConnection;
    UniQuery1: TUniQuery;
    UniQuery2: TUniQuery;
    procedure Button2Click(Sender: TObject);
    procedure Button1Click(Sender: TObject);
    procedure CBOtkudaChange(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure CBKogoChange(Sender: TObject);
    procedure CBKuda1Change(Sender: TObject);
    procedure CBKomnataChange(Sender: TObject);
  private
    { Private declarations }
    FTableName, FtableNamekuda: string;
  public
    { Public declarations }
  end;

var
  FMPereselenie: TFMPereselenie;

implementation

{$R *.dfm}
var
  fiosotrud, komnata:string;

procedure TFMPereselenie.Button1Click(Sender: TObject);
var
  query: TUniQuery;
  FIOSotrudnika, Comment, Datazaezda, dolznost, org, tel: string; // Объявляем переменные для хранения значений столбцов
begin
  query := TUniQuery.Create(nil);
  try
    query.Connection := UniConnection1;

// Ищем строку "ФИО" в таблице FTableName и запоминаем значения столбцов
    query.SQL.Text := 'SELECT * FROM `' + FTableName + '` WHERE `ФИО сотрудника` = :fio';
    query.Params.ParamByName('fio').AsString := CBKogo.Text;
    query.Open;
    if not query.IsEmpty then begin
      FIOSotrudnika := query.FieldByName('ФИО сотрудника').AsString;
      Comment := query.FieldByName('Комментарий').AsString;
      Datazaezda := query.FieldByName('Дата заезда(отпуска)').AsString;
      dolznost := query.FieldByName('Должность').AsString;
      org := query.FieldByName('Организация').AsString;
      tel := query.FieldByName('Контактный телефон').AsString;

  // Удаляем найденную строку из базы
      query.Delete;

  // Записываем значения переменных в целевую таблицу
      query.SQL.Text := 'INSERT INTO `' + FtableNamekuda +
      '` (`ФИО сотрудника`, `Комментарий`, `Дата заезда(отпуска)`, `Должность`, `Организация`, `Контактный телефон`, `Номер комнаты`) ' +
                    'VALUES (:fio, :comment, :datazaezda, :dolznost, :org, :tel, :komnata)';
      query.Params.ParamByName('fio').AsString := FIOSotrudnika;
      query.Params.ParamByName('comment').AsString := Comment;
      query.Params.ParamByName('datazaezda').AsString := Datazaezda;
      query.Params.ParamByName('dolznost').AsString := dolznost;
      query.Params.ParamByName('org').AsString := org;
      query.Params.ParamByName('tel').AsString := tel;
      query.Params.ParamByName('komnata').AsString := komnata; // значение номера комнаты берём из переменной
      query.Execute;
    end;
  finally
  query.Free;
end;

CBKogo.Enabled := false;
CBKogo.Items.Clear;
CBKogo.Text := 'ФИО сотрудника для удаления';
end;

procedure TFMPereselenie.Button2Click(Sender: TObject);
begin
  Close;
end;

procedure TFMPereselenie.CBKogoChange(Sender: TObject);
begin
  CBKuda1.Enabled:= true;
  fiosotrud:=CBKogo.Text;
end;

procedure TFMPereselenie.CBKomnataChange(Sender: TObject);
begin
  komnata:=CBKomnata.Text;
end;

procedure TFMPereselenie.CBKuda1Change(Sender: TObject);
var
  UniQuery1: TUniQuery;
begin
   CBKomnata.Enabled:=true;
  FtableNamekuda:='';
  case CBkuda1.ItemIndex of
   0: begin
    FtableNamekuda:='balki';
    // Подключение к базе данных MySQL
    UniConnection1.Connect;

    // Выборка уникальных значений из таблицы "balki"
     UniQuery1 := TUniQuery.Create(nil);
     UniQuery1.Connection := UniConnection1;
     UniQuery1.SQL.Text := 'SELECT DISTINCT `Номер балка` FROM `balki`';
     UniQuery1.Open;

     // Заполнение ComboBox2 полученными значениями
     CBKomnata.Clear;
     while not UniQuery1.Eof do
     begin
       CBKomnata.Items.Add(UniQuery1.FieldByName('Номер балка').AsString);
       UniQuery1.Next;
     end;

   end;
   1: begin
    FtableNamekuda:='obchaga';
    // Подключение к базе данных MySQL
    UniConnection1.Connect;

     // Выборка уникальных значений из таблицы "obchaga"
     UniQuery1 := TUniQuery.Create(nil);
     UniQuery1.Connection := UniConnection1;
     UniQuery1.SQL.Text := 'SELECT DISTINCT `Номер комнаты` FROM `obchaga`';
     UniQuery1.Open;

     // Заполнение ComboBox2 полученными значениями
     CBKomnata.Clear;
     while not UniQuery1.Eof do
     begin
       CBKomnata.Items.Add(UniQuery1.FieldByName('Номер комнаты').AsString);
       UniQuery1.Next;
     end;

   end;
  end;
end;

procedure TFMPereselenie.CBOtkudaChange(Sender: TObject);
var
  Query: TUniQuery;
  List: TStrings;
begin
  Query:=nil;
  CBKogo.Enabled:=true;
  FTableName := '';
  case CBOtkuda.ItemIndex of
    0:
    begin
      // Выбран первый пункт, выводим список из таблицы balki
      Query := UniQuery2;
      Query.SQL.Text := 'SELECT `ФИО сотрудника` FROM `balki`';
      FTableName := 'balki';
    end;
    1:
    begin
      // Выбран третий пункт, выводим список из таблицы obchaga
      Query := UniQuery2;
      Query.SQL.Text := 'SELECT `ФИО сотрудника` FROM `obchaga`';
      FTableName := 'obchaga';
    end;
  end;

  List := TStringList.Create;
  try
    if Assigned(Query) then
    begin
      Query.Connection := UniConnection1;
      Query.Open;
      while not Query.Eof do
      begin
        List.Add(Query.FieldByName('ФИО сотрудника').AsString);
        Query.Next;
      end;
      CBKogo.Items.Assign(List);
      Query.Close;
    end;
  finally
    List.Free;
  end;
end;

procedure TFMPereselenie.FormShow(Sender: TObject);
begin
  CBOtkuda.ItemIndex:=-1;
  CBOtkuda.Text:='Выберите место проживания';
end;

end.
