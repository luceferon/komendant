unit ServerU;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Data.DB, DBAccess, Uni, Vcl.StdCtrls, MySQLUniProvider,
  MemDS, inifiles, cabfiles;

type
  TForm1 = class(TForm)
    Edit1: TEdit;
    Edit2: TEdit;
    Edit3: TEdit;
    Button1: TButton;
    UniConnection1: TUniConnection;
    Label1: TLabel;
    Label2: TLabel;
    Label3: TLabel;
    Button2: TButton;
    Button3: TButton;
    Edit4: TEdit;
    Label4: TLabel;
    Button4: TButton;
    UniQuery1: TUniQuery;
    Button5: TButton;
    CABFile1: TCABFile;
    Edit5: TEdit;
    Label5: TLabel;
    Label6: TLabel;
    Edit6: TEdit;
    Label7: TLabel;
    Edit7: TEdit;
    Label8: TLabel;
    Edit8: TEdit;
    procedure Button1Click(Sender: TObject);
    procedure Button2Click(Sender: TObject);
    procedure Button3Click(Sender: TObject);
    procedure Button4Click(Sender: TObject);
    procedure Button5Click(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  Form1: TForm1;
  conn:boolean;
  balki, obchaga:integer;
  serverDB, userDB, passDB, DB, FileServer: string;
  Con: TUniConnection;
  Query: TUniQuery;

implementation

uses
  prozivanieU, mestaU;


{$R *.dfm}

 {const
  B64: array[0..63] of byte= (65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,
    81,82,83,84,85,86,87,88,89,90,97,98,99,100,101,102,103,104,105,106,107,108,
    109,110,111,112,113,114,115,116,117,118,119,120,121,122,48,49,50,51,52,53,
    54,55,56,57,43,47);

function B64Encode(pInput: pointer; pOutput: pointer; Size: longint): longint;
var
  i, iptr, optr: integer;
  Input, Output: PByteArray;
begin
  Input:= PByteArray(pInput); Output:= PByteArray(pOutput);
  iptr:= 0; optr:= 0;
  for i:= 1 to (Size div 3) do
  begin
    Output^[optr+0]:= B64[Input^[iptr] shr 2];
    Output^[optr+1]:= B64[((Input^[iptr] and 3) shl 4) + (Input^[iptr+1] shr 4)];
    Output^[optr+2]:= B64[((Input^[iptr+1] and 15) shl 2) + (Input^[iptr+2] shr 6)];
    Output^[optr+3]:= B64[Input^[iptr+2] and 63];
    Inc(optr,4); Inc(iptr,3);
  end;
  case (Size mod 3) of
    1: begin
         Output^[optr+0]:= B64[Input^[iptr] shr 2];
         Output^[optr+1]:= B64[(Input^[iptr] and 3) shl 4];
         Output^[optr+2]:= byte('=');
         Output^[optr+3]:= byte('=');
       end;
    2: begin
         Output^[optr+0]:= B64[Input^[iptr] shr 2];
         Output^[optr+1]:= B64[((Input^[iptr] and 3) shl 4) + (Input^[iptr+1] shr 4)];
         Output^[optr+2]:= B64[(Input^[iptr+1] and 15) shl 2];
         Output^[optr+3]:= byte('=');
       end;
  end;
  Result:= ((Size+2) div 3) * 4;
end;


function Base64Encode(const Value: AnsiString): AnsiString;
begin
  SetLength(Result,((Length(Value)+2) div 3) * 4);
  B64Encode(@Value[1],@Result[1],Length(Value));
end;


function B64Decode(pInput: pointer; pOutput: pointer; Size: longint): longint;
var
  i, j, iptr, optr: integer;
  Temp: array[0..3] of byte;
  Input, Output: PByteArray;
begin
  Input:= PByteArray(pInput); Output:= PByteArray(pOutput);
  iptr:= 0; optr:= 0;
  Result:= 0;
  for i:= 1 to (Size div 4) do
  begin
    for j:= 0 to 3 do
    begin
      case Input^[iptr] of
        65..90 : Temp[j]:= Input^[iptr] - Ord('A');
        97..122: Temp[j]:= Input^[iptr] - Ord('a') + 26;
        48..57 : Temp[j]:= Input^[iptr] - Ord('0') + 52;
        43     : Temp[j]:= 62;
        47     : Temp[j]:= 63;
        61     : Temp[j]:= $FF;
      end;
      Inc(iptr);
    end;
    Output^[optr]:= (Temp[0] shl 2) or (Temp[1] shr 4);
    Result:= optr+1;
    if (Temp[2]<> $FF) and (Temp[3]= $FF) then
    begin
      Output^[optr+1]:= (Temp[1] shl 4) or (Temp[2] shr 2);
      Result:= optr+2;
      Inc(optr)
    end
    else if (Temp[2]<> $FF) then
    begin
      Output^[optr+1]:= (Temp[1] shl 4) or (Temp[2] shr 2);
      Output^[optr+2]:= (Temp[2] shl 6) or  Temp[3];
      Result:= optr+3;
      Inc(optr,2);
    end;
    Inc(optr);
  end;
end;

function Base64Decode(const Value: AnsiString): AnsiString;
begin
  SetLength(Result,(Length(Value) div 4) * 3);
  SetLength(Result,B64Decode(@Value[1],@Result[1],Length(Value)));
end;

function EncryptString(const AStr: string): string;
var
  Enc: TNetEncoding;
begin
  Enc := TBase64Encoding.Create; // Создаем объект для кодирования в Base64
  try
    Result := Enc.Encode(AStr); // Кодируем исходную строку
  finally
    Enc.Free;
  end;
end;  }

procedure CreateHiddenFolder(const Path: string);
var
  SecurityAttributes: TSecurityAttributes;
  Folder: string;
begin
  Folder := IncludeTrailingPathDelimiter(Path) + 'komendant';

  // Установка атрибутов, чтобы папка была скрытой
  SecurityAttributes.nLength := SizeOf(SecurityAttributes);
  SecurityAttributes.lpSecurityDescriptor := nil;
  SecurityAttributes.bInheritHandle := True;

  // Создание папки с установленными атрибутами
  CreateDirectory(PChar(Folder), @SecurityAttributes);
  SetFileAttributes(PChar(Folder), FILE_ATTRIBUTE_HIDDEN);
end;

procedure CreateMariaDBDatabase(const Server, UserName, Password: string; const DatabaseName: string);
var
  Connection: TUniConnection;
  Query: TUniQuery;
begin
  Connection := TUniConnection.Create(nil);
  try
    Connection.ProviderName := 'MySQL';
    Connection.Server := Server;
    Connection.Username := UserName;
    Connection.Password := Password;
    Connection.Database := '';

    Query := TUniQuery.Create(nil);
    try
      Query.Connection := Connection;

      // Создание базы данных
      Query.SQL.Text := 'CREATE DATABASE ' + DatabaseName;
      Query.ExecSQL;

      ShowMessage('База данных успешно создана!');
    finally
      Query.Free;
    end;
  finally
    Connection.Free;
  end;
end;

procedure TForm1.Button1Click(Sender: TObject);
begin
     // Устанавливаем параметры подключения к базе данных
  UniConnection1.Server := Edit1.Text;
  UniConnection1.Username := Edit2.Text;
  UniConnection1.Password := Edit3.Text;

  try
    // Пытаемся установить соединение с базой данных
    UniConnection1.Connected := True;

    // Если соединение установлено успешно, выводим сообщение
    ShowMessage('Соединение установлено');
    conn:=true;
    Button2.Enabled:=true;
    Edit1.Enabled:=false;
    Edit2.Enabled:=false;
    Edit3.Enabled:=false;
  except
    // Если произошла ошибка при подключении, выводим сообщение
    ShowMessage('Ошибка при установке соединения');
    conn:=false;
    Button2.Enabled:=false;
  end;
end;

procedure TForm1.Button2Click(Sender: TObject);
begin
   DB:='komendant';
   CreateMariaDBDatabase(Edit1.Text, Edit2.Text, Edit3.Text, DB);
   Button1.Enabled:=false;
   Button3.Enabled:=true;
   serverDB:=edit1.Text;
   userDB:=edit2.Text;
   passDB:=Edit3.Text;
   // Создаем и настраиваем объект подключения
   Con := TUniConnection.Create(nil);
   Con.ProviderName := 'MySQL';
   Con.Server := serverDB;
   Con.Database := DB;
   Con.Username := userDB;
   Con.Password := passDB;
   Con.Connect;

   try
    // Создаем таблицу "balki"
    Query := TUniQuery.Create(nil);
    Query.Connection := Con;
    Query.SQL.Text := 'CREATE TABLE IF NOT EXISTS balki (' +
                      'Номер VARCHAR(255), ' +
                      'Кол_во_мест VARCHAR(255), ' +
                      'ФИО_сотрудника VARCHAR(255), ' +
                      'Комментарий VARCHAR(255), ' +
                      'Дата_заезда_отпуска VARCHAR(255), ' +
                      'Должность VARCHAR(255), ' +
                      'Организация VARCHAR(255), ' +
                      'Контактный_телефон VARCHAR(255))';
    Query.ExecSQL;
        // Создаем таблицу "obchaga"
    Query.SQL.Text := 'CREATE TABLE IF NOT EXISTS obchaga (' +
                      'Номер VARCHAR(255), ' +
                      'Кол_во_мест VARCHAR(255), ' +
                      'ФИО_сотрудника VARCHAR(255), ' +
                      'Комментарий VARCHAR(255), ' +
                      'Дата_заезда_отпуска VARCHAR(255), ' +
                      'Должность VARCHAR(255), ' +
                      'Организация VARCHAR(255), ' +
                      'Контактный_телефон VARCHAR(255))';
    Query.ExecSQL;
   finally
    Con.Close;
   end;
end;

procedure TForm1.Button3Click(Sender: TObject);
begin
  Form2.ShowModal;
  Button4.Enabled:=true;
  Edit4.Enabled:=false;
  Button2.Enabled:=false;
end;

procedure TForm1.Button4Click(Sender: TObject);
begin
   Form3.ShowModal;
   Button5.Enabled:=true;
   Button3.Enabled:=false;
   Edit6.Enabled:=true;
   Edit7.Enabled:=true;
   Edit8.Enabled:=true;
end;

procedure TForm1.Button5Click(Sender: TObject);
var
  Ini, Ini2: Tinifile;
  {ESS, ESU, ESP, ESDB, ESUch, ESFS, ESK, ESSys, ESNach: string;}
begin
  CreateHiddenFolder('\\'+ Edit5.Text + '\smb_share');
  {ESS := EncryptString(serverDB);
  ESU := EncryptString(userDB);
  ESP := Base64Encode(passDB);
  ESDB := EncryptString(DB);
  ESUch := EncryptString(Edit4.Text);
  ESFS := EncryptString(Edit5.Text);
  ESK := EncryptString(Edit6.Text);
  ESSys := EncryptString(Edit7.Text);
  ESNach := EncryptString(Edit8.Text);}
  //CreateHiddenFolder('C:\Program Files');
  //CreateDir('C:\Program Files\komendant');
  Ini:=TiniFile.Create(extractfilepath(paramstr(0))+'conf.ini');
  Ini.WriteString('Connection','Server',Edit1.Text);
  Ini.WriteString('Connection','User',Edit2.Text);
  Ini.WriteString('Connection','Password',Edit3.Text);
  Ini.WriteString('Connection','DB','komendant');
  Ini.WriteString('Uchastok','Uchastok',Edit4.Text);
  Ini.WriteString('Uchastok','FileServ',Edit5.Text);
  Ini.WriteString('Uchastok','Kladovchik',Edit6.Text);
  Ini.WriteString('Uchastok','SysAdmin',Edit7.Text);
  Ini.WriteString('Uchastok','NachUch',Edit8.Text);
  Ini.Free;

  Ini2:=TiniFile.Create('\\'+ Edit5.Text + '\smb_share\komendant\conf.ini');
  ini2.WriteBool('FirstRun','FirstRun',true);
  Ini2.Free;

  CABFile1.CABFile:=extractfilepath(paramstr(0))+'conf.cab';
  CABFile1.GetContents;
  CABFile1.TargetPath:='\\'+ Edit5.Text + '\smb_share\komendant\';
  CABFile1.ExtractAll;
  Application.Terminate;
end;

end.
